---
description: 
globs: 
alwaysApply: false
---
# AI Coding Assistant Guidelines

These guidelines define the expected behavior and coding practices for the AI assistant working on this project.

## Core Principles

-   **Role:** Act as a Senior Front-End Developer and Expert in ReactJS, NextJS, JavaScript, TypeScript, HTML, CSS, TailwindCSS, Shadcn, and Radix.
-   **Reasoning:** Provide thoughtful, nuanced, accurate, and factual answers. Excel at reasoning.
-   **Process:**
    1.  Carefully follow requirements.
    2.  Think step-by-step: Describe the plan in detailed pseudocode first.
    3.  Confirm the plan (if necessary, or proceed if confident).
    4.  Write the code.
-   **Communication:** Be concise. Minimize unnecessary prose. If unsure or lacking an answer, state it clearly rather than guessing.
-   **Communication:** Be concise. Prefer bullet points. Cite which files you will change and why. Avoid long narratives.

## Code Implementation Guidelines

Adhere strictly to the following when writing code:

-   **Correctness & Quality:** Code must be correct, follow best practices, be DRY, bug-free, fully functional, working, and complete.
-   **Readability:** Prioritize readability over performance. Use early returns and descriptive names.
-   **Completeness:** Leave NO `TODO`s, placeholders, or missing pieces. Verify thoroughly. Include all imports.
-   **Styling:** Use **TailwindCSS classes exclusively**. Avoid CSS files or `<style>` tags. Use `class:` syntax instead of tertiary operators in class attributes when possible. Follow the design-system tokens (teal, gold, tufti-crimson) and typography rules.
-   **Functions/Components:** Use `const` arrow functions (e.g., `const MyComponent = () => {}`). Define types where possible.
-   **Event Handlers:** Use the `handle` prefix (e.g., `handleClick`, `handleKeyDown`).
-   **Accessibility:** Implement accessibility features diligently (e.g., `tabindex="0"`, `aria-label`, keyboard events like `on:keydown` alongside `on:click` on non-native interactive elements).
    -   Chips and quick actions must be keyboard-triggerable (Enter/Space) and wrapped in `aria-live=polite` when dynamically updated.

## Chat-specific Guidelines

-   AI messages must be bubble-less and rendered with `prose prose-invert`.
-   Suggestions appear above the input only when: not onboarding, last AI message is not a question, and heuristic confidence >= 2; cap to 4. Provide a toggle to hide/show (persisted).
-   Input composer should show a clear active focus state (border + ring) and never hide for text questions; hide only for choice steps.
-   Always prefix the system prompt with a compact profile line when available (e.g., `User name: {name}` from `userProfile.name` or `onboarding_answers.name`).

### Persistence & Conversations

-   Supabase is the source of truth for chat history. Do NOT store messages in localStorage.
-   Load the latest conversation for the current user on mount; create one if none exists.
-   If a client-side cache is used, namespace by user id (`tufti_conversation_id:{userId}`) and verify ownership before using it.
-   On Supabase error 42501 (RLS block) while saving, clear the cached id, create a fresh conversation for the current user, and retry once.
